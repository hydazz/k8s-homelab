---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
spec:
  interval: 5m
  install:
    createNamespace: true
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3
  chart:
    spec:
      chart: ingress-nginx
      version: 4.12.3
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
        namespace: flux-system
  values:
    installCRDs: true
    controller:
      kind: DaemonSet
      ingressClassResource:
        name: internal-nginx
        controllerValue: "k8s.io/ingress-internal"
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      service:
        loadBalancerIP: 192.168.4.10
        externalTrafficPolicy: Local
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      metrics:
        enabled: true
        service:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "10254"
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ingress-nginx-external
  namespace: ingress-nginx
spec:
  interval: 5m
  install:
    createNamespace: true
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3
  chart:
    spec:
      chart: ingress-nginx
      version: 4.12.3
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
        namespace: flux-system
  values:
    installCRDs: true
    controller:
      kind: DaemonSet
      ingressClassResource:
        name: external-nginx
        controllerValue: "k8s.io/ingress-external"
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      service:
        loadBalancerIP: 192.168.4.15
        externalTrafficPolicy: Local
      # crowdsec >
      #      extraVolumes:
      #        - name: crowdsec-bouncer-plugin
      #          emptyDir: {}
      #      extraInitContainers:
      #        - name: init-clone-crowdsec-bouncer
      #          image: crowdsecurity/lua-bouncer-plugin
      #          imagePullPolicy: IfNotPresent
      #          env:
      #            - name: API_URL
      #              value: "http://crowdsec-service.crowdsec.svc.cluster.local:8080"
      #            - name: API_KEY
      #              valueFrom:
      #                secretKeyRef:
      #                  name: crowdsec-bouncers
      #                  key: nginx
      #            - name: BOUNCER_CONFIG
      #              value: "/crowdsec/crowdsec-bouncer.conf"
      #            - name: CAPTCHA_PROVIDER
      #              value: "recaptcha"
      #            - name: BAN_TEMPLATE_PATH
      #              value: /etc/nginx/lua/plugins/crowdsec/templates/ban.html
      #            - name: CAPTCHA_TEMPLATE_PATH
      #              value: /etc/nginx/lua/plugins/crowdsec/templates/captcha.html
      #          command:
      #            [
      #              "sh",
      #              "-c",
      #              "sh /docker_start.sh; mkdir -p /lua_plugins/crowdsec/; cp -R /crowdsec/* /lua_plugins/crowdsec/",
      #            ]
      #          volumeMounts:
      #            - name: crowdsec-bouncer-plugin
      #              mountPath: /lua_plugins
      #      extraVolumeMounts:
      #        - name: crowdsec-bouncer-plugin
      #          mountPath: /etc/nginx/lua/plugins/crowdsec
      #          subPath: crowdsec
      #      config:
      #        plugins: "crowdsec"
      #        lua-shared-dicts: "crowdsec_cache: 50m"
      #        server-snippet: |
      #          resolver local=on ipv6=off;
      # < crowdsec
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      metrics:
        enabled: true
        service:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "10254"
